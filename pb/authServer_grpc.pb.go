// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	// 认证传入加密串，返回加密用户信息
	Auth(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Auth(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/auth.server.AuthService/auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	// 认证传入加密串，返回加密用户信息
	Auth(context.Context, *wrapperspb.StringValue) (*wrapperspb.StringValue, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) Auth(context.Context, *wrapperspb.StringValue) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.server.AuthService/auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Auth(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.server.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "auth",
			Handler:    _AuthService_Auth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authServer.proto",
}

// PermissionsOperationServiceClient is the client API for PermissionsOperationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PermissionsOperationServiceClient interface {
	// 返回权限对应的json字符串
	QueryAllPermissions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (PermissionsOperationService_QueryAllPermissionsClient, error)
	// 推送权限
	PushPermissions(ctx context.Context, opts ...grpc.CallOption) (PermissionsOperationService_PushPermissionsClient, error)
	// 删除权限信息
	DeletePermissions(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type permissionsOperationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPermissionsOperationServiceClient(cc grpc.ClientConnInterface) PermissionsOperationServiceClient {
	return &permissionsOperationServiceClient{cc}
}

func (c *permissionsOperationServiceClient) QueryAllPermissions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (PermissionsOperationService_QueryAllPermissionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PermissionsOperationService_ServiceDesc.Streams[0], "/auth.server.PermissionsOperationService/queryAllPermissions", opts...)
	if err != nil {
		return nil, err
	}
	x := &permissionsOperationServiceQueryAllPermissionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PermissionsOperationService_QueryAllPermissionsClient interface {
	Recv() (*wrapperspb.StringValue, error)
	grpc.ClientStream
}

type permissionsOperationServiceQueryAllPermissionsClient struct {
	grpc.ClientStream
}

func (x *permissionsOperationServiceQueryAllPermissionsClient) Recv() (*wrapperspb.StringValue, error) {
	m := new(wrapperspb.StringValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *permissionsOperationServiceClient) PushPermissions(ctx context.Context, opts ...grpc.CallOption) (PermissionsOperationService_PushPermissionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PermissionsOperationService_ServiceDesc.Streams[1], "/auth.server.PermissionsOperationService/pushPermissions", opts...)
	if err != nil {
		return nil, err
	}
	x := &permissionsOperationServicePushPermissionsClient{stream}
	return x, nil
}

type PermissionsOperationService_PushPermissionsClient interface {
	Send(*wrapperspb.StringValue) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type permissionsOperationServicePushPermissionsClient struct {
	grpc.ClientStream
}

func (x *permissionsOperationServicePushPermissionsClient) Send(m *wrapperspb.StringValue) error {
	return x.ClientStream.SendMsg(m)
}

func (x *permissionsOperationServicePushPermissionsClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *permissionsOperationServiceClient) DeletePermissions(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.server.PermissionsOperationService/deletePermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermissionsOperationServiceServer is the server API for PermissionsOperationService service.
// All implementations must embed UnimplementedPermissionsOperationServiceServer
// for forward compatibility
type PermissionsOperationServiceServer interface {
	// 返回权限对应的json字符串
	QueryAllPermissions(*emptypb.Empty, PermissionsOperationService_QueryAllPermissionsServer) error
	// 推送权限
	PushPermissions(PermissionsOperationService_PushPermissionsServer) error
	// 删除权限信息
	DeletePermissions(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	mustEmbedUnimplementedPermissionsOperationServiceServer()
}

// UnimplementedPermissionsOperationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPermissionsOperationServiceServer struct {
}

func (UnimplementedPermissionsOperationServiceServer) QueryAllPermissions(*emptypb.Empty, PermissionsOperationService_QueryAllPermissionsServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryAllPermissions not implemented")
}
func (UnimplementedPermissionsOperationServiceServer) PushPermissions(PermissionsOperationService_PushPermissionsServer) error {
	return status.Errorf(codes.Unimplemented, "method PushPermissions not implemented")
}
func (UnimplementedPermissionsOperationServiceServer) DeletePermissions(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermissions not implemented")
}
func (UnimplementedPermissionsOperationServiceServer) mustEmbedUnimplementedPermissionsOperationServiceServer() {
}

// UnsafePermissionsOperationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermissionsOperationServiceServer will
// result in compilation errors.
type UnsafePermissionsOperationServiceServer interface {
	mustEmbedUnimplementedPermissionsOperationServiceServer()
}

func RegisterPermissionsOperationServiceServer(s grpc.ServiceRegistrar, srv PermissionsOperationServiceServer) {
	s.RegisterService(&PermissionsOperationService_ServiceDesc, srv)
}

func _PermissionsOperationService_QueryAllPermissions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PermissionsOperationServiceServer).QueryAllPermissions(m, &permissionsOperationServiceQueryAllPermissionsServer{stream})
}

type PermissionsOperationService_QueryAllPermissionsServer interface {
	Send(*wrapperspb.StringValue) error
	grpc.ServerStream
}

type permissionsOperationServiceQueryAllPermissionsServer struct {
	grpc.ServerStream
}

func (x *permissionsOperationServiceQueryAllPermissionsServer) Send(m *wrapperspb.StringValue) error {
	return x.ServerStream.SendMsg(m)
}

func _PermissionsOperationService_PushPermissions_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PermissionsOperationServiceServer).PushPermissions(&permissionsOperationServicePushPermissionsServer{stream})
}

type PermissionsOperationService_PushPermissionsServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*wrapperspb.StringValue, error)
	grpc.ServerStream
}

type permissionsOperationServicePushPermissionsServer struct {
	grpc.ServerStream
}

func (x *permissionsOperationServicePushPermissionsServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *permissionsOperationServicePushPermissionsServer) Recv() (*wrapperspb.StringValue, error) {
	m := new(wrapperspb.StringValue)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PermissionsOperationService_DeletePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionsOperationServiceServer).DeletePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.server.PermissionsOperationService/deletePermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionsOperationServiceServer).DeletePermissions(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

// PermissionsOperationService_ServiceDesc is the grpc.ServiceDesc for PermissionsOperationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PermissionsOperationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.server.PermissionsOperationService",
	HandlerType: (*PermissionsOperationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "deletePermissions",
			Handler:    _PermissionsOperationService_DeletePermissions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "queryAllPermissions",
			Handler:       _PermissionsOperationService_QueryAllPermissions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "pushPermissions",
			Handler:       _PermissionsOperationService_PushPermissions_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "authServer.proto",
}
